
	.data
prKey:		.space 16
puKey:		.space 16
message:	.space 16
buffer:		.space 16

puk_file:   	.asciiz "_publicKeys.txt"
bad_msg:    	.asciiz "open file syscall failed\n"

	.text
	.globl _main
_main:
	# set arguments to read public key	
	la $t0, puk_file	# Name of the file to open
	li $t1, 0		# Open for reading (flags are 0: read, 1: write) 
	la $t2, puKey          	# addr input buffer
	jal _readFile		# load public key to mem
	
	li $v0, 10		# load syscall: exit
	syscall
	
	
_readFile:
	# OPEN
	li $v0, 13		# load syscall: open_file
	move $a0, $t0		# load argument: file name
	move $a1, $t1		# load argument: 0 => read, 1 => write)
	li $a2, 0	        # mode is ignored
	syscall	 		# execute syscall: open_file
	
	move $t8, $v0			# catch file descriptor
	blt $t8, $zero, _errExit	# open file failed
	
	# READ
	move $a0, $t8		# Load file descriptor
	move $a1, $t2		# load argument: input buffer
	li $a2, 16		# max number of characters (bytes) to load
	li $v0, 14		# load syscall: read_from_file
	syscall	 		# execute syscall: open_file
	
	move $t0, $v0		# catch read status
	beqz $v0, _readErrExit	# read file failed
	
	#CLOSE
	move $a0, $t8		# Load file descriptor
	li $v0, 16		# load syscall: close_file
	syscall	 		# execute syscall: close_file
	
	jr $ra			# jump back
	
_errExit:
	la      $a0, bad_msg	# load bad message
	li      $v0, 4		# print error message
	syscall	
	
	li $a0, 1		# load generic error: 1
	li $v0, 17		# load syscall: exit2 with code
	syscall
  
  _readErrExit:
	li $a0, 2		# load generic error: 1
	li $v0, 17		# load syscall: exit2 with code
	syscall
  