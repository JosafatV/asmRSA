	.data
firstKey: .space 32
seconKey: .space 32
modulKey: .space 32

	.text
	.globl _main
	
_main:
	# load first operand
	la $t1, firstKey
	
	li $t0, 765432		# first 32 bits
	sw $t0, 12($t1)
	
	li $t0, 1		# second 32 bits
	sw $t0, 8($t1)
	
	li $t0, 2		# third 32 bits
	sw $t0, 4($t1)
	
	li $t0, 4		# fourth 32 bits
	sw $t0, ($t1)
	
	# load second operand
	la $t2, seconKey
	
	li $t0, 765432		# first 32 bits
	sw $t0, 12($t2)
	
	li $t0, 1		# second 32 bits
	sw $t0, 8($t2)
	
	li $t0, 2		# third 32 bits
	sw $t0, 4($t2)
	
	li $t0, 4		# fourth 32 bits
	sw $t0, ($t2)
	
_mul64:	# t0 = t1 * t2; t1>t2
	la $t0, modulKey	# load result address
	li $t6, 0		# t6 = overflow
	
	lw $t3, 12($t1)		#load first 32 bits of first operand
	lw $t4, 12($t2) 	#load first 32 bits of second operand
	add $t3, $t3, $t6	# add overflow to first operand
	mul $t5, $t3, $t4	# multiply first 32 bits
	sw $t5, 12($t0)		# store result
	mfhi $t6		# get overflow
	
	lw $t3, 8($t1)		#load second 32 bits of first operand
	lw $t4, 8($t2) 		#load second 32 bits of second operand
	add $t3, $t3, $t6	# add overflow to first operand
	mfhi $t7		#for the rare case that overflow causes overflow
	beqz $t4, mdone		# multiplication is done, store overflow
	mul $t5, $t3, $t4	# multiply first 32 bits
	sw $t5, 8($t0)		# store result
	mfhi $t6		# get overflow
	add $t6, $t6, $t7	# add possible overflows
	
	lw $t3, 4($t1)		#load third 32 bits of first operand
	lw $t4, 4($t2) 		#load third 32 bits of second operand
	add $t3, $t3, $t6	# add overflow to first operand
	beqz $t4, mdone		# multiplication is done, store overflow
	mul $t5, $t3, $t4	# multiply first 32 bits
	sw $t5, 4($t0)		# store result
	mfhi $t6		# get overflow
	
	lw $t3, ($t1)		#load fourth 32 bits of first operand
	lw $t4, ($t2) 		#load fourth 32 bits of second operand
	add $t3, $t3, $t6	# add overflow to first operand
	beqz $t4, mdone		# multiplication is done, store overflow
	mul $t5, $t3, $t4	# multiply first 32 bits
	sw $t5, ($t0)		# store result
	mfhi $t6		# get overflow
	

_mdone8:
	sw $t3, 8($t0)		# store result
	mfhi $t6		# get overflow
	lw $t3, 4($t1)		#load third 32 bits of first operand
	add $t3, $t3, $t6	# add overflow to first operand